{{ config(
    cluster_by = "_cta_loaded_at",
    partition_by = {"field": "_cta_loaded_at", "data_type": "timestamp", "granularity": "day"},
    unique_key = "_knock_people_hashid"
) }}

-- SQL model to parse JSON blob stored in a single column and extract into separated field columns as described by the JSON Schema
-- depends_on: {{ source('cta', '_raw_knock_people') }}

select
    cast(id as {{ dbt_utils.type_bigint() }}) as id,
    cast(created_date as {{ dbt_utils.type_bigint() }}) as created_date,
    cast(state_file_id as {{ dbt_utils.type_string() }}) as state_file_id,
    cast(county_file_id as {{ dbt_utils.type_string() }}) as county_file_id,
    cast(action_network_id as {{ dbt_utils.type_string() }}) as action_network_id,
    cast(of_voter_file_id as {{ dbt_utils.type_string() }}) as of_voter_file_id,
    cast(other_voter_file_id as {{ dbt_utils.type_string() }}) as other_voter_file_id,
    cast(alloy_uuid as {{ dbt_utils.type_string() }}) as alloy_uuid,
    cast(vr_status as {{ dbt_utils.type_string() }}) as vr_status,
    cast(full_name as {{ dbt_utils.type_string() }}) as full_name,
    cast(honorarium as {{ dbt_utils.type_string() }}) as honorarium,
    cast(first_name as {{ dbt_utils.type_string() }}) as first_name,
    cast(middle_name as {{ dbt_utils.type_string() }}) as middle_name,
    cast(last_name as {{ dbt_utils.type_string() }}) as last_name,
    cast(suffix as {{ dbt_utils.type_string() }}) as suffix,
    cast(preferred_name as {{ dbt_utils.type_string() }}) as preferred_name,
    cast(sex as {{ dbt_utils.type_string() }}) as sex,
    cast(age as {{ dbt_utils.type_bigint() }}) as age,
    cast(dob as {{ dbt_utils.type_bigint() }}) as dob,
    cast(gender_identity as {{ dbt_utils.type_string() }}) as gender_identity,
    cast(phone1 as {{ dbt_utils.type_string() }}) as phone1,
    cast(phone_opt_in1 as bool) as phone_opt_in1,
    cast(phone2 as {{ dbt_utils.type_string() }}) as phone2,
    cast(phone_opt_in2 as bool) as phone_opt_in2,
    cast(email1 as {{ dbt_utils.type_string() }}) as email1,
    cast(email_opt_in1 as bool) as email_opt_in1,
    cast(email2 as {{ dbt_utils.type_string() }}) as email2,
    cast(email_opt_in2 as bool) as email_opt_in2,
    cast(prov_full_address as {{ dbt_utils.type_string() }}) as prov_full_address,
    cast(prov_address1 as {{ dbt_utils.type_string() }}) as prov_address1,
    cast(prov_address2 as {{ dbt_utils.type_string() }}) as prov_address2,
    cast(prov_city as {{ dbt_utils.type_string() }}) as prov_city,
    cast(prov_state as {{ dbt_utils.type_string() }}) as prov_state,
    cast(prov_zip_5 as {{ dbt_utils.type_string() }}) as prov_zip_5,
    cast(p_raw_lat_long as {{ dbt_utils.type_string() }}) as p_raw_lat_long,
    cast(p_raw_lat as float64) as p_raw_lat,
    cast(p_raw_long as float64) as p_raw_long,
    cast(p_geom as {{ dbt_utils.type_string() }}) as p_geom,
    cast(contacted_full_address as {{ dbt_utils.type_string() }}) as contacted_full_address,
    cast(lives_at_contacted as bool) as lives_at_contacted,
    cast(reg_full_address as {{ dbt_utils.type_string() }}) as reg_full_address,
    cast(reg_address1 as {{ dbt_utils.type_string() }}) as reg_address1,
    cast(reg_address2 as {{ dbt_utils.type_string() }}) as reg_address2,
    cast(reg_city as {{ dbt_utils.type_string() }}) as reg_city,
    cast(reg_county as {{ dbt_utils.type_string() }}) as reg_county,
    cast(reg_state as {{ dbt_utils.type_string() }}) as reg_state,
    cast(reg_zip_5 as {{ dbt_utils.type_string() }}) as reg_zip_5,
    cast(r_raw_lat_long as {{ dbt_utils.type_string() }}) as r_raw_lat_long,
    cast(r_raw_lat as float64) as r_raw_lat,
    cast(r_raw_long as float64) as r_raw_long,
    cast(r_geom as {{ dbt_utils.type_string() }}) as r_geom,
    cast(mail_full_address as {{ dbt_utils.type_string() }}) as mail_full_address,
    cast(mail_address1 as {{ dbt_utils.type_string() }}) as mail_address1,
    cast(mail_address2 as {{ dbt_utils.type_string() }}) as mail_address2,
    cast(mail_city as {{ dbt_utils.type_string() }}) as mail_city,
    cast(mail_state as {{ dbt_utils.type_string() }}) as mail_state,
    cast(mail_zip_5 as {{ dbt_utils.type_string() }}) as mail_zip_5,
    cast(m_raw_lat_long as {{ dbt_utils.type_string() }}) as m_raw_lat_long,
    cast(m_raw_lat as float64) as m_raw_lat,
    cast(m_raw_long as float64) as m_raw_long,
    cast(m_geom as {{ dbt_utils.type_string() }}) as m_geom,
    cast(early_voted as bool) as early_voted,
    cast(contacted_national_address_id_id as {{ dbt_utils.type_bigint() }}) as contacted_national_address_id_id,
    cast(mailing_national_address_id_id as {{ dbt_utils.type_bigint() }}) as mailing_national_address_id_id,
    cast(provided_national_address_id_id as {{ dbt_utils.type_bigint() }}) as provided_national_address_id_id,
    cast(registered_national_address_id_id as {{ dbt_utils.type_bigint() }}) as registered_national_address_id_id,
    cast(actionkit_id as {{ dbt_utils.type_string() }}) as actionkit_id,
    cast(mobilize_id as {{ dbt_utils.type_string() }}) as mobilize_id,
    cast(polling_location as {{ dbt_utils.type_string() }}) as polling_location,
    cast(precinct_id as {{ dbt_utils.type_string() }}) as precinct_id,
    cast(precinct_name as {{ dbt_utils.type_string() }}) as precinct_name,
    cast(van_id as {{ dbt_utils.type_string() }}) as van_id,
    cast(mail_street_name as {{ dbt_utils.type_string() }}) as mail_street_name,
    cast(mail_street_number as {{ dbt_utils.type_string() }}) as mail_street_number,
    cast(mail_unit_number as {{ dbt_utils.type_string() }}) as mail_unit_number,
    cast(prov_street_name as {{ dbt_utils.type_string() }}) as prov_street_name,
    cast(prov_street_number as {{ dbt_utils.type_string() }}) as prov_street_number,
    cast(prov_unit_number as {{ dbt_utils.type_string() }}) as prov_unit_number,
    cast(reg_street_name as {{ dbt_utils.type_string() }}) as reg_street_name,
    cast(reg_street_number as {{ dbt_utils.type_string() }}) as reg_street_number,
    cast(reg_unit_number as {{ dbt_utils.type_string() }}) as reg_unit_number,
    cast(political_party as {{ dbt_utils.type_string() }}) as political_party,
    cast(my_campaign_id as {{ dbt_utils.type_string() }}) as my_campaign_id,
    cast(member as bool) as member,
    cast(mail_apt_type as {{ dbt_utils.type_string() }}) as mail_apt_type,
    cast(mail_street_number_half as {{ dbt_utils.type_string() }}) as mail_street_number_half,
    cast(mail_street_part as {{ dbt_utils.type_string() }}) as mail_street_part,
    cast(mail_street_prefix as {{ dbt_utils.type_string() }}) as mail_street_prefix,
    cast(mail_street_suffix as {{ dbt_utils.type_string() }}) as mail_street_suffix,
    cast(mail_street_type as {{ dbt_utils.type_string() }}) as mail_street_type,
    cast(prov_apt_type as {{ dbt_utils.type_string() }}) as prov_apt_type,
    cast(prov_street_number_half as {{ dbt_utils.type_string() }}) as prov_street_number_half,
    cast(prov_street_part as {{ dbt_utils.type_string() }}) as prov_street_part,
    cast(prov_street_prefix as {{ dbt_utils.type_string() }}) as prov_street_prefix,
    cast(prov_street_suffix as {{ dbt_utils.type_string() }}) as prov_street_suffix,
    cast(prov_street_type as {{ dbt_utils.type_string() }}) as prov_street_type,
    cast(reg_apt_type as {{ dbt_utils.type_string() }}) as reg_apt_type,
    cast(reg_street_number_half as {{ dbt_utils.type_string() }}) as reg_street_number_half,
    cast(reg_street_part as {{ dbt_utils.type_string() }}) as reg_street_part,
    cast(reg_street_prefix as {{ dbt_utils.type_string() }}) as reg_street_prefix,
    cast(reg_street_suffix as {{ dbt_utils.type_string() }}) as reg_street_suffix,
    cast(reg_street_type as {{ dbt_utils.type_string() }}) as reg_street_type,
    cast(mail_county as {{ dbt_utils.type_string() }}) as mail_county,
    cast(prov_county as {{ dbt_utils.type_string() }}) as prov_county,
    cast(dwid as {{ dbt_utils.type_string() }}) as dwid,
    cast(other_crm_id as {{ dbt_utils.type_string() }}) as other_crm_id,
    cast(phone3 as {{ dbt_utils.type_string() }}) as phone3,
    cast(phone4 as {{ dbt_utils.type_string() }}) as phone4,
    cast(phone_opt_in3 as bool) as phone_opt_in3,
    cast(phone_opt_in4 as bool) as phone_opt_in4,
    cast(voterbase_id as {{ dbt_utils.type_string() }}) as voterbase_id,
    cast(mail_zip_4 as {{ dbt_utils.type_string() }}) as mail_zip_4,
    cast(prov_zip_4 as {{ dbt_utils.type_string() }}) as prov_zip_4,
    cast(reg_zip_4 as {{ dbt_utils.type_string() }}) as reg_zip_4,
    cast(partition_schema_name as {{ dbt_utils.type_string() }}) as partition_schema_name,
    cast(partition_name as {{ dbt_utils.type_string() }}) as partition_name,

    -- new fields
    {{ dbt_utils.generate_surrogate_key([
        'id',
        'created_date',
        'state_file_id',
        'county_file_id',
        'action_network_id',
        'of_voter_file_id',
        'other_voter_file_id',
        'alloy_uuid',
        'vr_status',
        'full_name',
        'honorarium',
        'first_name',
        'middle_name',
        'last_name',
        'suffix',
        'preferred_name',
        'sex',
        'age',
        'dob',
        'gender_identity',
        'phone1',
        'phone_opt_in1',
        'phone2',
        'phone_opt_in2',
        'email1',
        'email_opt_in1',
        'email2',
        'email_opt_in2',
        'prov_full_address',
        'prov_address1',
        'prov_address2',
        'prov_city',
        'prov_state',
        'prov_zip_5',
        'p_raw_lat_long',
        'p_raw_lat',
        'p_raw_long',
        'p_geom',
        'contacted_full_address',
        'lives_at_contacted',
        'reg_full_address',
        'reg_address1',
        'reg_address2',
        'reg_city',
        'reg_county',
        'reg_state',
        'reg_zip_5',
        'r_raw_lat_long',
        'r_raw_lat',
        'r_raw_long',
        'r_geom',
        'mail_full_address',
        'mail_address1',
        'mail_address2',
        'mail_city',
        'mail_state',
        'mail_zip_5',
        'm_raw_lat_long',
        'm_raw_lat',
        'm_raw_long',
        'm_geom',
        'early_voted',
        'contacted_national_address_id_id',
        'mailing_national_address_id_id',
        'provided_national_address_id_id',
        'registered_national_address_id_id',
        'actionkit_id',
        'mobilize_id',
        'polling_location',
        'precinct_id',
        'precinct_name',
        'van_id',
        'mail_street_name',
        'mail_street_number',
        'mail_unit_number',
        'prov_street_name',
        'prov_street_number',
        'prov_unit_number',
        'reg_street_name',
        'reg_street_number',
        'reg_unit_number',
        'political_party',
        'my_campaign_id',
        'member',
        'mail_apt_type',
        'mail_street_number_half',
        'mail_street_part',
        'mail_street_prefix',
        'mail_street_suffix',
        'mail_street_type',
        'prov_apt_type',
        'prov_street_number_half',
        'prov_street_part',
        'prov_street_prefix',
        'prov_street_suffix',
        'prov_street_type',
        'reg_apt_type',
        'reg_street_number_half',
        'reg_street_part',
        'reg_street_prefix',
        'reg_street_suffix',
        'reg_street_type',
        'mail_county',
        'prov_county',
        'dwid',
        'other_crm_id',
        'phone3',
        'phone4',
        'phone_opt_in3',
        'phone_opt_in4',
        'voterbase_id',
        'mail_zip_4',
        'prov_zip_4',
        'reg_zip_4',
        'partition_schema_name',
        'partition_name',
    ]) }} as _knock_people_hashid,
    {{ current_timestamp() }} as _cta_loaded_at
from {{ source('cta', '_raw_knock_people') }}
where 1 = 1
